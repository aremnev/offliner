<?php

namespace Thumbtack\testBundle\Entity;

use Doctrine\Common\Collections\ArrayCollection;
use Doctrine\ORM\Mapping as ORM;
use Symfony\Component\Validator\Constraints as Assert;
/**
 * CV entity
 *
 * @ORM\Table(name="cv_info")
 * @ORM\Entity()
 */
class cv_info
{
    /**
     * CV id
     *
     * @var integer $id
     * @ORM\Column(name="id", type="integer")
     * @ORM\Id
     * @ORM\GeneratedValue(strategy="AUTO")
     */
    private $id;

    /**
     * CV title
     *
     * @var string $title
     * @Assert\NotBlank()
     * @ORM\Column(name="title", type="string", length=255)
     */
    private $title = '';

    /**
     *@var string $description
     *
     *@ORM\Column(name="$description", type="string", length=255)
     */
    private $description;

    /**
     * Custom_info for post
     *
     * @var ArrayCollection
     * @ORM\ManyToMany(targetEntity="custom_info")
     * @ORM\JoinTable(name="cv_info_custom",
     *      joinColumns={@ORM\JoinColumn(name="info_id", referencedColumnName="id")},
     *      inverseJoinColumns={@ORM\JoinColumn(name="custom_id", referencedColumnName="id")}
     *      )
     */
    private $customs;

    /**
     * Custom_info for post
     *
     * @var ArrayCollection
     * @ORM\OneToOne(targetEntity="basic_info")
     * @ORM\JoinColumn(name="basic_info_id", referencedColumnName="id")
     */
    private $basic;

    /**
     * @var \DateTime $created
     *
     * @ORM\Column(type="datetime")
     */
    private $created;

    /**
     * @var \DateTime $updated
     *
     * @ORM\Column(type="datetime")
     */
    private $updated;

    /**
     * Constructor
     */
    public function __construct()
    {
        $this->customs = new \Doctrine\Common\Collections\ArrayCollection();
    }
    
    /**
     * Get id
     *
     * @return integer 
     */
    public function getId()
    {
        return $this->id;
    }

    /**
     * Set title
     *
     * @param string $title
     * @return cv_info
     */
    public function setTitle($title)
    {
        $this->title = $title;
    
        return $this;
    }

    /**
     * Get title
     *
     * @return string 
     */
    public function getTitle()
    {
        return $this->title;
    }

    /**
     * Set description
     *
     * @param string $description
     * @return cv_info
     */
    public function setDescription($description)
    {
        $this->description = $description;
    
        return $this;
    }

    /**
     * Get description
     *
     * @return string 
     */
    public function getDescription()
    {
        return $this->description;
    }

    /**
     * Set created
     *
     * @param \DateTime $created
     * @return cv_info
     */
    public function setCreated($created)
    {
        $this->created = $created;
    
        return $this;
    }

    /**
     * Get created
     *
     * @return \DateTime 
     */
    public function getCreated()
    {
        return $this->created;
    }

    /**
     * Set updated
     *
     * @param \DateTime $updated
     * @return cv_info
     */
    public function setUpdated($updated)
    {
        $this->updated = $updated;
    
        return $this;
    }

    /**
     * Get updated
     *
     * @return \DateTime 
     */
    public function getUpdated()
    {
        return $this->updated;
    }

    /**
     * Add customs
     *
     * @param \Thumbtack\testBundle\Entity\custom_info $customs
     * @return cv_info
     */
    public function addCustom(\Thumbtack\testBundle\Entity\custom_info $customs)
    {
        $this->customs[] = $customs;
    
        return $this;
    }

    /**
     * Remove customs
     *
     * @param \Thumbtack\testBundle\Entity\custom_info $customs
     */
    public function removeCustom(\Thumbtack\testBundle\Entity\custom_info $customs)
    {
        $this->customs->removeElement($customs);
    }

    /**
     * Get customs
     *
     * @return \Doctrine\Common\Collections\Collection 
     */
    public function getCustoms()
    {
        return $this->customs;
    }

    /**
     * Set basic
     *
     * @param \Thumbtack\testBundle\Entity\basic_info $basic
     * @return cv_info
     */
    public function setBasic(\Thumbtack\testBundle\Entity\basic_info $basic = null)
    {
        $this->basic = $basic;
    
        return $this;
    }

    /**
     * Get basic
     *
     * @return \Thumbtack\testBundle\Entity\basic_info 
     */
    public function getBasic()
    {
        return $this->basic;
    }
}