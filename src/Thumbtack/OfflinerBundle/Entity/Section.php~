<?php

namespace Thumbtack\testBundle\Entity;

use Doctrine\ORM\Mapping as ORM;
use Symfony\Component\Validator\Constraints as Assert;
use Doctrine\Common\Collections\ArrayCollection;

/**
 * CVSection entity
 *
 * @ORM\Table(name="Section")
 * @ORM\Entity()
 */
class Section
{
    /**
     * custom cv info id
     *
     * @var integer $id
     * @ORM\Column(name="id", type="integer")
     * @ORM\Id
     * @ORM\GeneratedValue(strategy="AUTO")
     */
    private $id;

    /**
     * @var ArrayCollection
     * @ORM\ManyToMany(targetEntity="Cv", mappedBy="sections")
     */
    private $cv;

    /**
     * custom cv info title
     *
     * @var string $title
     * @Assert\NotBlank()
     * @ORM\Column(name="title", type="string", length=255)
     */
    private $title = '';

    /**
     *@var string $data
     *
     *@ORM\Column(name="data", type="string", length=255)
     */
    private $data = '';


    /**
     * Get id
     *
     * @return integer
     */
    public function getId(){
        return $this->id;
    }

    /**
     * Set title
     *
     * @param string $title
     * @return Section
     */
    public function setTitle($title){
        $this->title = $title;

        return $this;
    }

    /**
     * Get title
     *
     * @return string
     */
    public function getTitle(){
        return $this->title;
    }

    /**
     * Set data
     *
     * @param string $data
     * @return Section
     */
    public function setData($data){
        $this->data = $data;

        return $this;
    }

    /**
     * Get data
     *
     * @return string
     */
    public function getData(){
        return $this->data;
    }

    /**
     * Get cv
     *
     * @return ArrayCollection()
     */
    public function getCv(){
        return $this->cv;
    }
    public function asArray($withData){
        $res = array();
        $res['id']=$this->getId();
        $res['title']=$this->getTitle();
        if($withData)
            $res['data']=$this->getData();
        return $res;
    }
    /**
     * Constructor
     */
    public function __construct(){
        $this->cv = new ArrayCollection();
    }

    /**
     * Add cv
     *
     * @param \Thumbtack\testBundle\Entity\Cv $cv
     * @return Section
     */
    public function addCv(Cv $cv){
        $this->cv[] = $cv;

        return $this;
    }

    /**
     * Remove cv
     *
     * @param \Thumbtack\testBundle\Entity\Cv $cv
     */
    public function removeCv(Cv $cv){
        $this->cv->removeElement($cv);
    }
}